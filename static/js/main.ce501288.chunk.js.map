{"version":3,"sources":["components/Button/Button.module.css","components/Settings/Settings.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","BLL/counterReducer.ts","App.tsx","reportWebVitals.ts","BLL/store.ts","utils/localstorage-utils.ts","index.tsx","components/Settings/Settings.module.css","components/Counter/Counter.module.css"],"names":["module","exports","Settings","maxValue","startValue","onChangeMaxValue","onChangeStartValue","className","s","incorrect","type","value","onChange","e","currentTarget","valueAsNumber","Button","props","commonStyle","onClick","disabled","buttonName","Counter","isValuesSet","error","styleNumber","bold","standard","initialState","App","state","useSelector","dispatch","useDispatch","counter","changeStartValueAC","changeMaxValueAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce501288.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonStyle\":\"Button_commonStyle__1k8Gh\"};","import React, {ChangeEvent} from \"react\";\r\nimport s from './Settings.module.css'\r\n\r\ntype SettingsPropsType = {\r\n    maxValue: number\r\n    startValue: number\r\n    onChangeStartValue: (value: number) => void\r\n    onChangeMaxValue: (value: number) => void\r\n}\r\n\r\nexport const Settings: React.FC<SettingsPropsType> = ({maxValue, startValue, onChangeMaxValue, onChangeStartValue}) => {\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => onChangeMaxValue(e.currentTarget.valueAsNumber)\r\n    const onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => onChangeStartValue(e.currentTarget.valueAsNumber)\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span>max value: </span>\r\n                <input\r\n                    className={maxValue < 0 ? s.incorrect : ''}\r\n                    type={'number'}\r\n                    value={maxValue}\r\n                    onChange={onChangeMaxValueHandler}\r\n                />\r\n            </div>\r\n            <div>\r\n                <span>start value: </span>\r\n                <input\r\n                    className={startValue < 0 ? s.incorrect : ''}\r\n                    type={'number'}\r\n                    value={startValue}\r\n                    onChange={onChangeStartValueHandler}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    buttonName: string\r\n    onClick: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n    return (\r\n        <>\r\n            <button\r\n                className={s.commonStyle}\r\n                onClick={props.onClick}\r\n                disabled={props.disabled}\r\n            >\r\n                {props.buttonName}\r\n            </button>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    startValue: number\r\n    isValuesSet: boolean\r\n    error: boolean\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = ({value, maxValue, startValue, isValuesSet, error}) => {\r\n\r\n    if (maxValue < 0 || startValue < 0 || maxValue === startValue) {\r\n        error = true\r\n    }\r\n    let styleNumber = maxValue === value || error ? s.bold : s.standard\r\n\r\n    return (\r\n        <>\r\n            {<span\r\n                className={styleNumber}>{error ? 'Incorrect value' : isValuesSet ? 'enter values and press \"set\"' : value}</span>}\r\n        </>\r\n    )\r\n}","let initialState = {\r\n    value: 0,\r\n    maxValue: 5,\r\n    startValue: 0,\r\n    isValuesSet: false,\r\n    error: false,\r\n    disabled: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INC_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.value + 1,\r\n            }\r\n        case \"RESET_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.startValue,\r\n            }\r\n        case \"CHANGE_DISPLAY_VALUE\" :\r\n            return {\r\n                ...state,\r\n                isValuesSet: false,\r\n                value: state.startValue,\r\n                disabled: true,\r\n            }\r\n        case \"CHANGE_START_VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.value,\r\n                isValuesSet: true,\r\n                disabled: false,\r\n            }\r\n        case \"CHANGE_MAX_VALUE\" :\r\n            return {\r\n                ...state,\r\n                isValuesSet: true,\r\n                maxValue: action.value,\r\n                disabled: false,\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n\r\n}\r\nexport type ActionsType = IncCounterACType | ResetCounterValueACType\r\n    | ChangeDisplayValueACType | ChangeStartValueACType | ChangeMaxValueACType\r\n\r\nexport const incCounterAC = () => ({type: 'INC_VALUE'} as const)\r\ntype IncCounterACType = ReturnType<typeof incCounterAC>\r\n\r\nexport const resetCounterValueAC = () => ({type: \"RESET_VALUE\"} as const)\r\ntype ResetCounterValueACType = ReturnType<typeof resetCounterValueAC>\r\n\r\nexport const changeDisplayValueAC = () => ({type: \"CHANGE_DISPLAY_VALUE\"} as const)\r\ntype ChangeDisplayValueACType = ReturnType<typeof changeDisplayValueAC>\r\n\r\nexport const changeStartValueAC = (value: number) => ({type: \"CHANGE_START_VALUE\", value} as const)\r\ntype ChangeStartValueACType = ReturnType<typeof changeStartValueAC>\r\n\r\nexport const changeMaxValueAC = (value: number) => ({type: \"CHANGE_MAX_VALUE\", value} as const)\r\ntype ChangeMaxValueACType = ReturnType<typeof changeMaxValueAC>\r\n","import React from 'react';\nimport './App.css';\nimport {Settings} from \"./components/Settings/Settings\";\nimport {Button} from \"./components/Button/Button\";\nimport {Counter} from \"./components/Counter/Counter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./BLL/store\";\nimport {\n    changeDisplayValueAC,\n    changeMaxValueAC,\n    changeStartValueAC,\n    incCounterAC,\n    resetCounterValueAC\n} from \"./BLL/counterReducer\";\n\n\nfunction App() {\n\n    const state = useSelector<AppStateType, AppStateType>(state => state)\n    const dispatch = useDispatch()\n\n    // useEffect(() => {\n    //     let valueStorageAsString = localStorage.getItem('value')\n    //     let maxValueStorageAsString = localStorage.getItem('maxvalue')\n    //     let startValueStorageAsString = localStorage.getItem('startvalue')\n    //     if (valueStorageAsString) {\n    //         let valueStorage = JSON.parse(valueStorageAsString)\n    //         setValue(valueStorage)\n    //     }\n    //     if (maxValueStorageAsString) {\n    //         let maxValueStorage = JSON.parse(maxValueStorageAsString)\n    //         setMaxValue(maxValueStorage)\n    //     }\n    //     if (startValueStorageAsString) {\n    //         let startValueStorage = JSON.parse(startValueStorageAsString)\n    //         setStartValue(startValueStorage)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem('value', JSON.stringify(value))\n    //     localStorage.setItem('maxvalue', JSON.stringify(maxValue))\n    //     localStorage.setItem('startvalue', JSON.stringify(startValue))\n    // }, [value, maxValue, startValue])\n\n    function increment() {\n        dispatch(incCounterAC())\n    }\n\n    function reset() {\n        dispatch(resetCounterValueAC())\n    }\n\n    function changeDisplayValue() {\n        dispatch(changeDisplayValueAC())\n    }\n\n    function onChangeStartValue(value: number) {\n        dispatch(changeStartValueAC(value))\n    }\n\n    function onChangeMaxValue(value: number) {\n        dispatch(changeMaxValueAC(value))\n    }\n\n    return (\n        <div className={'App'}>\n            <div className={'Wrapper'}>\n                <div className={'Wrapper_small'}>\n                    <Settings\n                        maxValue={state.counter.maxValue}\n                        startValue={state.counter.startValue}\n                        onChangeStartValue={onChangeStartValue}\n                        onChangeMaxValue={onChangeMaxValue}\n                    />\n                </div>\n                <Button\n                    buttonName={'SET'}\n                    onClick={changeDisplayValue}\n                    disabled={state.counter.disabled}\n                />\n            </div>\n            <div className={'Wrapper'}>\n                <div className={'Wrapper_small'}>\n                    <Counter\n                        value={state.counter.value}\n                        startValue={state.counter.startValue}\n                        maxValue={state.counter.maxValue}\n                        isValuesSet={state.counter.isValuesSet}\n                        error={state.counter.error}\n                    />\n                </div>\n                <Button\n                    buttonName={'INC'}\n                    onClick={increment}\n                    disabled={state.counter.value === state.counter.maxValue || state.counter.error}\n                />\n                <Button\n                    buttonName={'RESET'}\n                    onClick={reset}\n                    disabled={state.counter.value === 0 || state.counter.error}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux'\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    });\r\n});","import {AppStateType} from \"../BLL/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./BLL/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"incorrect\":\"Settings_incorrect__3Ue9C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"standard\":\"Counter_standard__bOTtb\",\"bold\":\"Counter_bold__1awng\"};"],"sourceRoot":""}